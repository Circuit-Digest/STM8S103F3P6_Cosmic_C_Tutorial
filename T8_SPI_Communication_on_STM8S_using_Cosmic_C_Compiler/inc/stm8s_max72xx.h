/*
Header Name: stm8s_max72xx.h
Author: Joydip Dutta
*/


#define decode_mode_reg 	0x09
#define intensity_reg 		0x0A
#define scan_limit_reg 		0x0B
#define shutdown_reg 			0x0C
#define display_test_reg	0x0F
 
#define shutdown_cmd 0x00
#define run_cmd      0x01
 
#define no_test_cmd 0x00
#define test_cmd    0x01

const char alphabets[26]= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

const uint8_t alpha_char[26][8] = {{0x0, 0xfc, 0xfe, 0x27, 0x27, 0xfe, 0xfc, 0x0},
{0x0, 0xfe, 0xfe, 0x92, 0x92, 0xfe, 0x6c, 0x0},
{0x0, 0x7e, 0xff, 0xc3, 0xc3, 0xe7, 0x66, 0x0},
{0x0, 0xff, 0xff, 0xc3, 0xc3, 0xff, 0x7e, 0x0},
{0x0, 0xfe, 0xfe, 0x92, 0xba, 0x82, 0xc6, 0x0},
{0x82, 0xfe, 0xfe, 0x92, 0x3a, 0x2, 0x6, 0x0},
{0x0, 0x7e, 0xff, 0xc3, 0xd3, 0xf7, 0x76, 0x0},
{0x0, 0xfe, 0xfe, 0x30, 0x30, 0xfe, 0xfe, 0x0},
{0x0, 0xc6, 0xc6, 0xfe, 0xfe, 0xc6, 0xc6, 0x0},
{0x0, 0x30, 0x70, 0x63, 0x63, 0x7f, 0x3f, 0x3},
{0x0, 0xff, 0xff, 0x18, 0x3c, 0x6e, 0xc7, 0x0},
{0x0, 0x81, 0xff, 0xff, 0x81, 0x80, 0xe0, 0x0},
{0x0, 0xfe, 0xfe, 0x1c, 0x38, 0x1c, 0xfe, 0xfe},
{0x4e, 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6},
{0x4f, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38},
{0x50, 0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0},
{0x51, 0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c},
{0x0, 0xff, 0xff, 0x33, 0x33, 0xff, 0xee, 0xc0},
{0x0, 0xce, 0xdf, 0xdb, 0xdb, 0xfb, 0x73, 0x0},
{0x0, 0x7, 0x83, 0xff, 0xff, 0x83, 0x7, 0x0},
{0x0, 0x7f, 0xff, 0xc0, 0xc0, 0xff, 0x7f, 0x0},
{0x56, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30},
{0x57, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6},
{0x58, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6},
{0x59, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78},
{0x7f, 0x7f, 0x61, 0x31, 0x98, 0x8c, 0xfe, 0xfe}
};


/*
Function Name: string_len
Description: It can be used to get the length of a String.
Return type: int.
*/

int string_len(char *string1)
{
    int len = 0;
    while(*string1 != 0) {
        string1++;
        len++;
    }
    return len;
}


/*
Function Name: MAX7219_init
Description: It can be used to initiate MAX7219 device.
type: void.
*/

void MAX7219_init(void)
{
    GPIO_Init(ChipSelect_port, ChipSelect_pin, GPIO_MODE_OUT_PP_HIGH_FAST);
 
    SPI_write(shutdown_reg, run_cmd);                 
    SPI_write(decode_mode_reg, 0x00);
    SPI_write(scan_limit_reg, 0x07);
    SPI_write(intensity_reg, 0x04);
    SPI_write(display_test_reg, test_cmd);
    delay_ms(10);     
    SPI_write(display_test_reg, no_test_cmd);  
}


/*
Function Name: diplay_clear
Description: It can be used to clear the matrix for once with 100 ms delay.
Return type: void.
*/

void display_clear(void) {
	    unsigned char zeros_clr[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 unsigned char j = 0x00;
	
	for(j = 0; j < sizeof(zeros_clr); j++)
	{
			
			SPI_write((1 + j),zeros_clr[j]);
			delay_ms(100);
	}

}


		
			
/*
Function Name: display_char
Description: It can be used to print a Character on the 8x8 matrix for once with 100 ms delay.
Return type: void.
*/



void display_char(int alphabet_sequence)
{
	  unsigned int i;

		for(i=0; i<8; i++){
	SPI_write((i+1), alpha_char[alphabet_sequence][i]);
		
		delay_ms(100);
		
		}

}

/*
Function Name: display_string
Description: It can be used to display a string on the 8x8 matrix for once with 1000 ms delay.
type: void.
*/


void display_string(const char string[]){
		
    unsigned char j,pos;
		
    int input_string_length  = string_len(string);
		int alphabets_length  = string_len(alphabets);
		
	for(j=0; j<input_string_length; j++){
	pos = 0;
	while(alphabets[pos]!='\0'){
		
	if(string[j] == alphabets[pos])
		display_char(pos);
	
	pos++;	
	delay_ms(500);
	}
}

}



